import * as query from '~/utilities/apollo-client/query'
import * as mutate from '~/utilities/apollo-client/mutate'

const client = {
   query: {
      login: query.login,
      logout: query.logout,
      comment: {
         aggregate: query.aggregateComment,
         count: query.countComment,
         findFirst: query.findFirstComment,
         findMany: query.findManyComment,
         findUnique: query.findUniqueComment,
         groupBy: query.groupByComment,
      },
      customer: {
         aggregate: query.aggregateCustomer,
         count: query.countCustomer,
         findFirst: query.findFirstCustomer,
         findMany: query.findManyCustomer,
         findUnique: query.findUniqueCustomer,
         groupBy: query.groupByCustomer,

      },
      discount: {
         aggregate: query.aggregateDiscount,
         count: query.countDiscount,
         findFirst: query.findFirstDiscount,
         findMany: query.findManyDiscount,
         findUnique: query.findUniqueDiscount,
         groupBy: query.groupByDiscount,
      },
      image: {
         aggregate: query.aggregateImage,
         count: query.countImage,
         findFirst: query.findFirstImage,
         findMany: query.findManyImage,
         findUnique: query.findUniqueImage,
         groupBy: query.groupByImage,
      },
      laptop: {
         aggregate: query.aggregateLaptop,
         count: query.countLaptop,
         findFirst: query.findFirstLaptop,
         findMany: query.findManyLaptop,
         findUnique: query.findUniqueLaptop,
         groupBy: query.groupByLaptop,
      },
      passage: {
         aggregate: query.aggregatePassage,
         count: query.countPassage,
         findFirst: query.findFirstPassage,
         findMany: query.findManyPassage,
         findUnique: query.findUniquePassage,
         groupBy: query.groupByPassage,
      },
      person: {
         aggregate: query.aggregatePerson,
         count: query.countPerson,
         findFirst: query.findFirstPerson,
         findMany: query.findManyPerson,
         findUnique: query.findUniquePerson,
         groupBy: query.groupByPerson,
      },
      post: {
         aggregate: query.aggregatePost,
         count: query.countPost,
         findFirst: query.findFirstPost,
         findMany: query.findManyPost,
         findUnique: query.findUniquePost,
         groupBy: query.groupByPost,
      },
      priceMap:{
         aggregate: query.aggregatePriceMap,
         count: query.countPriceMap,
         findFirst: query.findFirstPriceMap,
         findMany: query.findManyPriceMap,
         findUnique: query.findUniquePriceMap,
         groupBy: query.groupByPriceMap,
      },
      purchase: {
         aggregate: query.aggregatePurchase,
         count: query.countPurchase,
         findFirst: query.findFirstPurchase,
         findMany: query.findManyPurchase,
         findUnique: query.findUniquePurchase,
         groupBy: query.groupByPurchase,
      },
      user: {
         aggregate: query.aggregateUser,
         count: query.countUser,
         findFirst: query.findFirstUser,
         findMany: query.findManyUser,
         findUnique: query.findUniqueUser,
         groupBy: query.groupByUser,
      },
      video:{
         aggregate: query.aggregateVideo,
         count: query.countVideo,
         findFirst: query.findFirstVideo,
         findMany: query.findManyVideo,
         findUnique: query.findUniqueVideo,
         groupBy: query.groupByVideo,
      },
   },
   mutate: {
      register: mutate.register,
      comment: {
         create: mutate.createComment,
         createMany: mutate.createManyComment,
         delete: mutate.deleteComment,
         deleteMany: mutate.deleteManyComment,
         update: mutate.updateComment,
      },
      customer: {
         create: mutate.createCustomer,
         createMany: mutate.createManyCustomer,
         delete: mutate.deleteCustomer,
         deleteMany: mutate.deleteManyCustomer,
         update: mutate.updateCustomer,
      },
      discount: {
         create: mutate.createDiscount,
         createMany: mutate.createManyDiscount,
         delete: mutate.deleteDiscount,
         deleteMany: mutate.deleteManyDiscount,
         update: mutate.updateDiscount,
      },
      image:{
         create: mutate.createImage,
         createMany: mutate.createManyImage,
         delete: mutate.deleteImage,
         deleteMany: mutate.deleteManyImage,
         update: mutate.updateImage,
      },
      laptop: {
         create: mutate.createLaptop,
         createMany: mutate.createManyLaptop,
         delete: mutate.deleteLaptop,
         deleteMany: mutate.deleteManyLaptop,
         update: mutate.updateLaptop,
      },
      passage: {
         create: mutate.createPassage,
         createMany: mutate.createManyPassage,
         delete: mutate.deletePassage,
         deleteMany: mutate.deleteManyPassage,
         update: mutate.updatePassage,
      },
      person: {
         create: mutate.createPerson,
         createMany: mutate.createManyPerson,
         delete: mutate.deletePerson,
         deleteMany: mutate.deleteManyPerson,
         update: mutate.updatePerson,
      },
      post: {
         create: mutate.createPost,
         createMany: mutate.createManyPost,
         delete: mutate.deletePost,
         deleteMany: mutate.deleteManyPost,
         update: mutate.updatePost,
      },
      priceMap:{
         create: mutate.createPriceMap,
         createMany: mutate.createManyPriceMap,
         delete: mutate.deletePriceMap,
         deleteMany: mutate.deleteManyPriceMap,
         update: mutate.updatePriceMap,
      },
      purchase: {
         create: mutate.createPurchase,
         createMany: mutate.createManyPurchase,
         delete: mutate.deletePurchase,
         deleteMany: mutate.deleteManyPurchase,
         update: mutate.updatePurchase,
      },
      user: {
         create: mutate.createUser,
         createMany: mutate.createManyUser,
         delete: mutate.deleteUser,
         deleteMany: mutate.deleteManyUser,
         update: mutate.updateUser,
      },
      video:{
         create: mutate.createVideo,
         createMany: mutate.createManyVideo,
         delete: mutate.deleteVideo,
         deleteMany: mutate.deleteManyVideo,
         update: mutate.updateVideo,
      },
   },
}

export default client